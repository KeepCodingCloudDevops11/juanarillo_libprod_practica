
name: Pipeline

on:
    pull_request:
      branches:
        - '*'
    push:
      branches:
        - '*'

env:
  PYTHON_VERSION: '3.10'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-

      - name: Upgrade pip
        run: pip3 install --upgrade pip

  linting_action:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
         python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore pip cache
        uses: actions/cache@v3
        with:
           path: ~/.cache/pip
           key: pip-${{ hashFiles('requirements.txt') }}
           restore-keys: |
             pip-

      - name: Set up virtualenv and install dependencies
        run: |
            python -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt

      - name: Run Pylint
        run: |
          source venv/bin/activate
          pylint --rcfile=.pylintrc src/application/app.py

  test_coverage_action:
    runs-on: ubuntu-latest
    needs: linting_action
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore pip cache
        uses: actions/cache@v3
        with:
           path: ~/.cache/pip
           key: pip-${{ hashFiles('requirements.txt') }}
           restore-keys: |
             pip-

      - name: Set up virtualenv and install dependencies
        run: |
            python -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt    

      - name: Run tests
        run: |
          source venv/bin/activate
          pytest -v --tb=short

      - name: Run coverage
        run: |
          source venv/bin/activate
          pytest --cov

  semantic_release:
    runs-on: ubuntu-latest
    needs: test_coverage_action
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
            node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Configure Git user
        run: |
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"

      - name: Ensure CHANGELOG.md exists
        run: |
            touch CHANGELOG.md
            git add CHANGELOG.md
            git commit -m "chore: add empty CHANGELOG.md" || echo "No changes to commit"

      - name: Run semantic-release and capture version
        id: semantic
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            VERSION=$(npx semantic-release | tee /dev/stderr | grep -oP 'Published release \K[0-9]+\.[0-9]+\.[0-9]+')
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "$VERSION" > version.txt
      
      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
            name: version
            path: version.txt
